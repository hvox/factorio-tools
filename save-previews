#!/usr/bin/env python3
"""
Find seed that satisfies specified condition.

Usage: {script} [options] COND

Arguments:
    COND - Any expression in python. TODO

Options:
    -h, --help
        Show this screen and exit.
    -q, --quiet
        Be extra quiet.

Examples:
    {script} "1e9 * (is_island(map) + TODO)"
"""
import sys
from contextlib import suppress
from itertools import chain, product
from pathlib import Path
from random import randint
from subprocess import PIPE, run
from time import monotonic as now
from time import sleep

import numpy as np
from numpy import array, uint8
from PIL import Image, ImageGrab
from re import compile as regex

FACTORIO_WINDOW = regex(r"Factorio: Space Age 2\.0\.[0-9]*")
MARK_TILES = True
DEBUG = True
QUIET = False

# w, h = 640, 360
w, h = 1920, 1080
x0, y0 = 368, 72
x1, y1 = 985, 928


# Enum
class Tile:
    DESERT = 1
    GRASS = 2
    WATER = 3


def main(script_name: str, *script_args: str):
    global QUIET
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    QUIET = args["--quiet"]
    condition = args["COND"]
    sleep(1)
    while True:
        win = get_active_window_name()
        if FACTORIO_WINDOW.match(win):
            do_the_thing(condition)
        else:
            while not FACTORIO_WINDOW.match(get_active_window_name()):
                sleep(1)
            sleep(10)


def do_the_thing(condition: str):
    map_seed = randint(0, 2**32 - 1)
    run(["xdotool", "mousemove", "630", "60", "click", "3"] + list(chain(*(["key", char] for char in str(map_seed)))))
    run(["xdotool", "mousemove", "1600", "540", "click", "1"])
    sleep(0.5)

    grab_delay = 0.2
    map_image = ImageGrab.grab(bbox=(704, 76, 1892, 1003))
    while any(max(map_image.getpixel((0, y))) < 10 for y in range(map_image.height)):
        sleep(grab_delay)
        map_image = ImageGrab.grab(bbox=(704, 76, 1892, 1003))
    if not FACTORIO_WINDOW.match(get_active_window_name()):
        if DEBUG or not QUIET:
            print(f"Abort factorio-previews/{map_seed:010}.png")
        if DEBUG:
            print(" Reason: active window is not Factorio's one")
        return

    # top = concat_horizontally(top_left, top_right, border=-328)
    # bottom = concat_horizontally(bottom_left, bottom_right, border=-328)
    # map_image = concat_vertically(top, bottom, border=-9)
    # pixels = np.array(map_image.resize((map_image.width, map_image.height)))
    # map = pixels.argmax(2) + 1
    # coolness = get_ringiness(map) * 1e9
    # coolness = min(2**32 - 1, max(0, round(coolness)))
    Path("previews").mkdir(exist_ok=True)
    map_path = Path(f"previews/{map_seed:010}.png")
    map_image.save(map_path)
    del map_image
    if not QUIET:
        print(f"Saved {map_path}")
    # Image.fromarray(np.uint8(map * 85), "L").save("map-marked.png")


def get_ringiness(map):
    w, h = len(map), len(map[0])
    visited = [[0] * h for _ in range(w)]
    queue = [(w // 2, h // 2)]
    while queue:
        x, y = queue.pop()
        visited[x][y] = True
        for dx, dy in product((-1, 0, 1), repeat=2):
            if x + dx < 0 or x + dx >= w or y + dy < 0 or y + dy >= h:
                continue
            if visited[x + dx][y + dy] or map[x + dx][y + dy] == Tile.WATER:
                continue
            queue.append((x + dx, y + dy))
            # This line is here for performance reasons
            visited[x + dx][y + dy] = True
    if MARK_TILES:
        for x, y in product(range(w), range(h)):
            if not visited[x][y] and map[x][y] != Tile.WATER:
                map[x][y] = 0
    ringiness = 2 * w + 2 * h - 2
    for x in range(w):
        ringiness -= visited[x][0] + visited[x][h - 1]
    for y in range(1, h - 1):
        ringiness -= visited[0][y] + visited[w - 1][y]
    return ringiness / (2 * w + 2 * h - 2)


def is_island(map):
    return get_ringiness(map) == 1


def concat_horizontally(left, right, border=0):
    result = Image.new("RGB", (left.width + right.width + border, left.height))
    result.paste(left, (0, 0))
    result.paste(right, (left.width + border, 0))
    return result


def concat_vertically(top, bottom, border=0):
    result = Image.new("RGB", (top.width, top.height + bottom.height + border))
    result.paste(top, (0, 0))
    result.paste(bottom, (0, top.height + border))
    return result


def get_active_window_name():
    cmd = ["xdotool", "getactivewindow", "getwindowname"]
    window_name = run(cmd, stdout=PIPE).stdout
    if DEBUG and window_name != getattr(get_active_window_name, "last_active_window", None):
        print(f"Active window: {window_name!r}")
        get_active_window_name.last_active_window = window_name
    return window_name.decode("utf-8", "replace").strip()


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
